<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
<html>

<head>
<BASE href = "http://www.cs.bham.ac.uk/~udr/">
<TITLE> Uday S. Reddy</TITLE>
</head>

<body>
<H1> Prof. Uday S. Reddy</H1>
<A href = "http://www.cs.bham.ac.uk/">
School of Computer Science</A>,
<A href = "http://www.bham.ac.uk/">
University of Birmingham</A>.



<P>
<strong>Appointments</strong> See my 
<a
href="https://calendar.cs.bham.ac.uk/command.shtml?view=weekview&amp;calid=udr&amp;tzid=Europe/London&amp;security=1">
<b>Diary</b></a>
<!--  href="http://calendar.yahoo.com/cshos2004" -->
as well as 
<a
href="https://calendar.cs.bham.ac.uk/command.shtml?view=weekview&amp;calid=diary&amp;tzid=Europe/London&amp;security=1">
<b>School diary</b></a>.<br>
Email me with suggested times at u.s.reddy at the School email address
(cs.bham.ac.uk), +44 121 414 2740.<br>


<p>
<strong>Current activities:</strong> Looking into the applications of
relational parametricity in mathematics and type theories in general, and
programming language semantics in particular.

<P>
<strong>Other affiliations:</strong>
Formerly at the
<A href = "http://www.cs.uiuc.edu/">
Department of Computer Science</A>,
<A href = "http://www.uiuc.edu/">
University of Illinois</A>.
I had been a visiting professor at 
<a href="http://www.dcs.qmw.ac.uk/">Queen Mary, University of
London</a>, and spent a sabbatical leave at
<a href="http://www.doc.ic.ac.uk/">Imperial College</a> and
<a href="http://www.dcs.gla.ac.uk/">University of Glasgow</a>.

<P>
<strong>Research Areas:</strong>
Functional programming, logic programming, object-oriented programming,
especially, programming with <EM>state</EM>.
Type systems, semantics and reasoning methods.
Constructive logic and type theory,
especially, <EM>linear logic</EM>. 
Automated deduction, program transformation and synthesis. 

<center>
<table cellspacing=20 cellpadding=10 width="100%">
<TR>

<td valign=top width="40%">
<h2> Research </h2>

    <UL>
    <LI> <A href = "#Recent">
	Recent activities</A>
    </LI>

    <LI>
    <A href = "#Summary">
	Summary of research</A>
    </LI>

    <LI>
    <A href = "#Students">
	Ph.D. Students</A>
    </LI>

    <LI>
    <A href = "#Bibliography">
	Bibliography</A>
    </LI>

    <LI>
    <A href = "http://www.cs.bham.ac.uk/~udr/papers/">
	Paper Archive</A>
    </LI>

    
    </UL>
<h2> Discussions </h2>

<p>
<a href = "http://stackexchange.com/users/1273820">
<!-- <a href="http://cstheory.stackexchange.com/users/8519/uday-reddy?tab=answers&sort=newest"> -->
<img src = "http://stackexchange.com/users/flair/1273820.png"</img>
<!-- <img src="http://cstheory.stackexchange.com/users/flair/8519.png"></img> -->
<!-- </a> -->
<!-- <p> -->
<!-- <a href="http://cstheory.stackexchange.com/users/8519/uday-reddy?tab=answers&sort=newest"> -->
<!-- <img src="http://cstheory.stackexchange.com/users/flair/8519.png"></img> -->
<!-- </a> -->


</td>


<TD valign=top width="70%">

<h2>Teaching</h2>
    <UL>
    <LI> 
      MSc Software Workshop, Spring 2017 (on Canvas)

    <LI>
     <a href="popl/index.html">Principles of Programming Languages,
     Spring 2017</a>

    <!-- <LI>  -->
    <!--  <a href="https://www.cs.bham.ac.uk/resources/courses/java/msc/sem2/">
    <!-- Software Workshop 2, Spring 2014</a> -->

    <LI>
      <a href="mgs/2014/par.html">Course on Logical Relations and
      Parametricity</a>, MGS 2014.
    <LI>
      <a href="notes/mgs2013.pdf">Lecture notes on Categories and Functors</a>, MGS
      2013. 
    <LI> 
     <a href="fund-db/index.html">Fundamentals: Databases,
     Autumn 2011</a>

    <LI> <a href="student-projects.html">
    Student Projects</a>

    <LI><a href="advisee-notes.html">
    Advisees page</a>

    <!-- <LI>  -->
    <!--  <a href="popl/2009/index.html">Principles of Programming Languages, -->
    <!--  Spring 2010</a> -->

    <!-- <LI>  -->
    <!--  <a href="courses/db2/index.html">Databases 2, Autumn 2009</a> -->

    <!-- <LI>  -->
    <!--  <a href="mgs/">MGS 2009 course on Separation Logic, -->
    <!--  Spring 2009</a> -->

    <!-- <li> -->
    <!--   <a href="courses/lang-information"> -->
    <!--   Language and Logic, Autumn 2006</a> -->

    <!-- <li> -->
    <!--   <a href="courses/mscworkshop">Software Workshop, Spring 2004</a> -->

    <!-- <LI> <a href = "http://www.cs.bham.ac.uk/~udr/courses/Intro/"> -->
    <!-- Intro to Computer Science A, Autumn 2002</a>  -->

    <!-- <LI> <a href = "http://www.cs.bham.ac.uk/~udr/courses/team-java/"> -->
    <!-- Software Workshop Team Java, Spring 2002</a>  -->

    <!-- <LI> <a href="http://www.cs.bham.ac.uk/~udr/courses/fyw/"> -->
    <!-- Software Workshop Java (First Year), Spring 2000</a> -->

    </LI>

    </UL>
</td>



</tr>
</table>

<table>


<tr>
<!-- <TD valign=top width="70%"> -->

<!-- <h2>Computing Resources</h2> -->

<!--     <UL> -->
<!--         <LI> <a href="tips/">Computing Tips</a></LI> -->
<!-- 	<LI> <a href="http://www.cs.bham.ac.uk/~udr/NatSpeak/"> -->
<!-- 	        NaturallySpeaking Tips</a>  -->
<!-- 	</LI> -->
<!--     </UL> -->
<!-- </TD> -->
<TD>
<!-- <a href="http://wikimediafoundation.org/wiki/Donate/en"><img border="0" alt="Wikipedia Affiliate Button" src="http://upload.wikimedia.org/wikipedia/foundation/3/36/2008_fundraiser_square_button-en.png" /></a> -->
</TD>
</tr>
</table>
</center>

<hr>

<A name = "Recent">
<H2>Recent papers/talks/manuscripts</H2></A>

<h3>Parametric polymorphism and Models of storage (November 2016)</h3>

A talk in memory
  of <a href="https://en.wikipedia.org/wiki/Christopher_Strachey">Christopher
  Strachey</a> at
  the <a href="https://www.cs.ox.ac.uk/strachey100/">Strachey 100 Centenary
  Conference</a>[<a href="talks/Strachey-talk.pdf">slides</a>]

<h3>The Essence of Reynolds</h3>
<strong>(with <a href="http://www.cs.cmu.edu/~brookes/">Stephen Brookes</a> and
  <a href="http://www0.cs.ucl.ac.uk/staff/P.OHearn/">Peter O'Hearn</a>, 
  POPL 2014.)</strong>
<p>
John Reynolds (1935-2013) was a pioneer of programming languages
research. In this paper we pay tribute to the man, his ideas,
and his influence.[<a href="papers/EssenceOfReynolds.pdf">PDF</a> | 
<a href="talks/EssenceOfReynolds-3.pdf">Presentation at POPL</a>]


<h3>Logical Relations and Parametricity: A Reynolds Programme for Category
  Theory and Programming Languages</h3> 
<strong>(with <a href="http://maggie.cs.queensu.ca/chermida/">
    Claudio Hermida</a> and
  <a href="http://www.eecs.qmul.ac.uk/~edmundr/">Edmund Robinson</a>.  
  Dedicated to the memory of John C. Reynolds, 1935-2013,
  <a href="http://www.sciencedirect.com/science/journal/15710661/303">WACT 2013</a>.)</strong>
<p>
In his seminal paper on “Types, Abstraction and Parametric Polymorphism,”
John Reynolds called for homomorphisms to be generalized from functions to
relations. He reasoned that such a generalization would allow type-based
“abstraction” (representation independence, information hiding, naturality
or parametricity) to be captured in a mathematical theory, while accounting
for higher-order types. However, after 30 years of research, we do not yet
know fully how to do such a generalization. In this article, we explain the
problems in doing so, summarize the work carried out so far, and call for a
renewed attempt at addressing the problem.
[<a href="http://www.sciencedirect.com/science/article/pii/S1571066114000346">ENTCS</a>
| 
<a href="papers/logical-relations-and-parametricity.pdf">preprint PDF</a>]


<h3>Automata-Theoretic Semantics of Idealized Algol with Passive Expressions
  (MFPS 2013)</h3>
Passive expressions in Algol-like languages represent computations that read
the state but do not modify it.  The need for such read-only computations
arises in programming logics as well as in concurrent programming.  It is
also a central facet in Reynolds's Syntactic Control of Interference.
Despite its importance and essentially basic character, capturing the notion
of passivity in semantic models has proved to be difficult.  In this paper,
we provide a new model of passive expressions using an automata-theoretic
framework recently proposed by the author.  The central idea is that the
store of a program is viewed as an abstract form of an automaton, with a
representation of its states as well as state transitions.  The framework
allows us to combine the strengths of conventional state-based models and
the more recent event-based models to synthesize new "automata-based"
models.  Once this basic framework is set up, relational parametricity does
the job of identifying passive computations.
[<a href="papers/passivity-2013.pdf">PDF</a> |
<a href="talks/mfps-reynolds-passivity.pdf">Slides from MFPS Reynolds
  memorial session</a> |
<a href="talks/mfps-reynolds-passivity-transitions.pdf">Slides with
  transitions</a> 
]


<h3>An Automata-Theoretic Model of Idealized Algol (with Brian Dunphy,
  ICALP 2012, July 2012)</h3>
In this paper, we present a new model of class-based Algol-like programming
languages inspired by automata-theoretic concepts.  The model may be seen as
a variant of the "object-based" model previously proposed by Reddy, where
objects are described by their observable behaviour in terms of events.  At
the same time, it also reflects the intuitions behind state-based models
studied by Reynolds, Oles, Tennent and O'Hearn where the effect of commands
is described by state transformations.  The idea is to view stores as
automata, capturing not only their states but also the allowed state
transformations.  In this fashion, we are able to combine both the
state-based and event-based views of objects.  We illustrate the efficacy of
the model by proving several test equivalences and discuss its connections
to the previous models.
[<a href="papers/automata-Algol-abstract.pdf">Extended abstract</a> | 
<a href="papers/automata-Algol-full.pdf">Full paper</a>
<!-- | <a href="talks/icalp-slides.pdf">Slides from ICALP</a> -->
]


<h3>Syntactic Control of Interference for Separation Logic (with John
C. Reynolds, POPL 2012, Jan 2012) </h3>
Separation Logic has witnessed tremendous success in recent years in
reasoning about programs that deal with heap storage.  Its success owes to
the fundamental principle that one should keep separate areas of the heap
storage separate in program reasoning.  However, the way Separation Logic
deals with program variables continues to be based on traditional Hoare
Logic without taking any benefit of the separation principle.  This has led
to unwieldy proof rules suffering from lack of clarity as well as questions
surrounding their soundness.  In this paper, we extend the separation idea
to the treatment of variables in Separation Logic, especially Concurrent
Separation Logic, using the system of Syntactic Control of Interference
proposed by Reynolds in 1978.  We extend Reynolds's original system with
permission algebras, making it more powerful and able to deal with the
issues of concurrent programs.  The result is a streamined presentation of
Concurrent Separation Logic, whose rules are memorable and soundness
obvious.  We also include a discussion of how the new rules impact the
semantics and devise static analysis techniques to infer the required
permissions automatically.

[<a href="papers/sci-reddy-reynolds.pdf">pdf file</a> | 
<a href="talks/sci-popl.pdf">Slides from POPL</a> |
<a href="talks/sci-seplogic-dublin.pdf">Reddy's slides</a> |
 <a href="http://www.cs.cmu.edu/~jcr/ppnslides.pdf">Reynolds' slides</a>]


<h3>An Automata-Theoretic Model of Objects (with Brian P. Dunphy,
  Foundations of Object-oriented Languages, October 2011)</h3>

In this paper, we present a new model of class-based Algol-like programming
languages inspired by automata-theoretic concepts.  The model may be seen as
a variant of the "object-based" model previously proposed by the author,
where objects are described by their observable behaviour in terms of
events.  At the same time, it also reflects the intuitions behind
state-based models studied by Reynolds, Oles, Tennent and O'Hearn where the
effect of commands is described by state transformations.  The idea is to
view stores as automata, capturing not only their states but also the
allowed state transformations.  In this fashion, we are able to combine both the
state-based and event-based views of objects.  We illustrate the efficacy of
the model by proving several test equivalences and discuss its connections
to the previous models.

[<a href="http://www.disi.unige.it/person/ZuccaE/FOOL2011/paper6.pdf">pdf
  file</a> | 
 <!-- <a href="papers/automata.pdf"></a> -->
 <a href="talks/automata-domains-X.pdf">talk at Domains X</a> |
 <a href="talks/automata-fool.pdf">talk at FOOL 2011</a>]


<h3>Syntactic Control of Interference for Separation Logic
  (Preliminary Report, April 2011)</h3>

Reynolds formulated a system of rules called Syntactic Control of
Interference in 1978 to capture the conventions of good programming
practice in controlling variable aliasing and to facilitate reasoning
about programs.  We apply these principles to the formulation of
Concurrent Separation Logic, which has been fraught with numerous side
conditions in its proof rules, making it non-compositional and hard to
use in practice.  Our system of Syntactic Control of Interference is
Reynolds's system extended with a permissions algebra, making it
powerful enough to deal with the issues of Concurrent Separation
Logic.  Alternative solutions from Brookes and Parkinson et al. are
compared and our solution is placed in context.  We also examine how
the reformulated proof rules impact the denotational semantics of the
programming language.
[<a href="papers/sci-seplogic.pdf">pdf file</a> |
<a href="talks/sci-seplogic-dublin.pdf">slides</a>]

<p>
<em> John Reynolds has formulated a static analysis algorithm for this
  system of rules, presented in his
<a href="http://www.cs.cmu.edu/~jcr/ppnslides.pdf">MFPS 2011 talk</a>.  A
  joint paper combining both the rules and the algorithm is under
  preparation.</em> 

<h3>Semantics of Parametric Polymorphism in Imperative Programming
  Languages (with Brian P. Dunphy, October 2010) </h3> 

Programming languages such as CLU, Ada and Modula-3 have included
facilities for parametric polymorphism and, more recently, C++ and
Java have also added similar facilities.  In this paper, we examine
the issues of defining denotational semantics for imperative
programming languages with polymorphism.  We use the framework of
reflexive graphs of categories previously developed for a general
axiomatization of relational parametricity constraints implicit in
polymorphic functions.  We specialize it to the context of imperative
programming languages, which in turn involve parametricity constraints
implicit in local variables.  The two levels of parametricity inherent
in such languages can be captured in a pleasing way in "higher-order"
reflexive graphs.

[<a href="papers/polymorphism.pdf">pdf file</a>]

<h3>Fine-grained concurrency with Separation Logic (<a
href="http://220.225.53.37/~kalpesh_kapoor/">Kalpesh Kapoor</a>, 
<a href="http://www.imsc.res.in/~kamal/">Kamal Lodaya</a> and Uday
Reddy, Journal of Philosophical Logic, Oct. 2011)</h3>  

Separation Logic is a recent development in programming logic which
has been applied by Peter O'Hearn to concurrency based on critical
sections as well as semaphores.  In this paper, we go one step further
and apply it to fine-grained concurrency.  We note that O'Hearn's
formulation of Concurrent Separation Logic is by and large applicable
to fine-grained concurrent programs with only minor adaptations.
However, proving substantial properties of such programs involves the
employment of sophisticated ``permissions'' frameworks so that different
processes can have different levels of access and exchange such
access.  We illustrate these techniques by showing the correctness
proof of a concurrent garbage collector originally studied by Dijkstra
et al.
[<a href="papers/fine-grained.pdf">pdf file</a>]

<h3>Parametric limits (Brian P. Dunphy and Uday S. Reddy, 
LICS 2004)</h3> 
We develop a categorical model of polymorphic lambda calculi using a
notion called parametric limits, which extend the notion of limits in
categories to reflexive graphs of categories.  We show that a number
of parametric models of polymorphism can be captured in this way.  We
also axiomatize the structure of reflexive graphs needed for modelling
parametric polymorphism based on ideas of fibrations, and show that it
leads to proofs of representation results such as the initial algebra and
final coalgebra properties one expects in polymorphic lambda calculi. 
[<a href="papers/parametric.ps">ps file</a>]
  | <a href="papers/parametric.pdf">pdf file</a>]

<h3>Correctness of data representations involving heap data structures
(with H. Yang,  Science of Computer Programming, 2004)</h3>
While the semantics of local variables in programming languages is by
now well-understood, the semantics of pointer-addressed heap variables
is still an outstanding issue.  In particular, the commonly assumed
relational reasoning principles for data representations have not been
validated in a semantic model of heap variables. In this paper, we
define a parametricity semantics for a Pascal-like language with
pointers and heap variables which gives such reasoning principles.  It
is found that the correspondences between data representations are not
simply relations between states, but more intricate correspondences
that also need to keep track of visible locations whose pointers can
be stored and leaked.
[<a href="papers/heap-parametricity.pdf">pdf file</a> | 
<a href="http://ropas.snu.ac.kr/~hyang/paper/heap-parametricity.pdf">
earlier version in ESOP 2003</a>]

<h3>Programming with the Mathematical and the Physical (Inaugural
lecture, May 6, 2003)</h3>

<a href="papers/inaugural-slides/index.htm">Slides</a> from my Inaugural
Lecture.  Reviews my work on the semantics of programming languages,
and discusses the dichotomy between mathematical and physical entities
that is faced in this work.


<h3>Brian Dunphy's PhD Thesis, 2002</h3>
<em>Parametricity as a notion of uniformity in reflexive graphs</em>,
Department of Mathematics, University of Illinois, 2002.
[<a href="papers/Brian-thesis.ps"> PS file</a> |
 <a href="papers/Brian-thesis.pdf"> PDF file</a>]

<h3>Hongseok Yang's PhD Thesis, 2001</h3>
<em>Local reasoning for stateful programs</em>, Department of Computer Science,
University of Illinois, 2001.
[<a href="http://ropas.snu.ac.kr/~hyang/paper/thesis.ps"> PS file</a>]


<h3>On the Semantics of Refinement Calculi (with H. Yang, FOSSACS 2000) </h3>

Refinement calculi for imperative programs provide an integrated
framework for programs and specifications and allow one to develop
programs from specifications in a systematic fashion.  The semantics
of these calculi has traditionally been defined in terms of predicate
transformers and poses several challenges in defining a state
transformer semantics in the denotational style. We define a novel
semantics in terms of sets of state transformers and prove it to be
isomorphic to multiplicative predicate transformers.  This semantics
disagrees with the traditional semantics in some places and the
consequences of the disagreement are analyzed.
[<a href="papers/refinement.ps">ps file</a> | 
 <a href="papers/refinement.pdf">pdf file</a>]

<h3>Parametric Sheaves for modelling store locality (with H.Yang) </h3>
In this paper, we bring together two important ideas in the semantics of
Algol-like imperative programming languages. One is that program phrases
act on fixed sets of storage locations. The second is that
the information of local variables is hidden from client programs.
This involves combining sheaf theory and parametricity
to produce new classes of sheaves. We define the semantics
of an Algol-like language using such sheaves and discuss the
reasoning principles validated by the semantics.
[<a href="papers/sheaf.ps">ps file</a> |
<a href="papers/sheaf.pdf">pdf file</a>]

<h3> Objects and classes in Algol-like languages
(Information and Computation, 2002)</h3>

Many object-oriented languages used in practice descend from Algol.
With this motivation, we study the theoretical issues underlying such
languages via the theory of Algol-like languages.  It is shown that
the basic framework of this theory extends cleanly and elegantly to
the concepts of objects and classes.  An important idea that comes to
light is that classes are abstract data types, whose theory
corresponds to that of existential types.  Equational and Hoare-like
reasoning methods, and relational parametricity provide powerful
formal tools for reasoning about Algol-like object-oriented programs.
[<a
href="papers/objects-and-classes.ps">ps
file</a> | <a href="papers/objects-and-classes.pdf">pdf file</a>]
]
<p>
This paper is an expanded version of a FOOL 98 paper:
[<a href="papers/classes.pdf">pdf file</a> | 
 <a href="papers/classes.dvi">dvi file</a> and a 
 <a href="papers/counter.ps"> ps figure</a>]

<h3> Type Reconstruction for SCI, Part 2
(H. Huang and H. Yang, ICCL 98)</h3>


Syntactic Control of Interference (SCI) [Rey78] has long been studied
as a basis for interference-free programming, with cleaner reasoning
properties and semantics than traditional imperative languages.  This
paper makes SCI-based languages more practical by introducing a revised
version of Huang and Reddy's type reconstruction system [HR96] with two
significant improvements. First, we eliminate the need for explicit
coercion operators in terms. Although this can lead to more complex
principal typings, we introduce some minor restrictions on the
inference system to keep the typings manageable. Second, we consider
adding let-bound polymorphism.  Such a modification appears to be
nontrivial. We propose a new approach which addresses issues of both
polymorphism and interference control. 
SCI can be adapted to a wide variety of languages, and
our techniques should be applicable to any such language with SCI-based
interference control.

<!-- Some examples show the utility of our system. -->

[<!-- <a href="papers/scirk2.dvi">dvi file</a> | -->
 <a href="papers/scirk2.pdf">pdf file</a>]


<h3> Imperative Lambda Calculus revisited
(Aug 97, with H. Yang)</h3>

Imperative Lambda Calculus is a type system designed to combine
functional and imperative programming features in an orthogonal
fashion without compromising the algebraic properties of functions.
It has been noted that the original system is too restrictive and
lacks the subject reduction property.  We define a revised type system
that solves these problems using ideas from Reynolds's Syntactic
Control of Interference.  We also extend it to handle Hindley-Milner
style polymorphism and devise type reconstruction algorithms.  A
sophisticated constraint language is designed to formulate principal
types for terms.

[<a href="papers/ilcr.dvi">dvi file</a> |
 <a href="papers/ilcr.pdf">pdf file</a>]

<h3>Parametricity and Naturality in the Semantics of Algol-like Languages
  (Unpublished manuscript, December 1998)</h3>

We examine the relationship between two notions of uniformity for
polymorphic functions, viz., relational parametricity and naturality.
While naturality applies only to first-order function types,
parametricity is more general.  We axiomatize parametricity at a
categorical level so that it subsumes naturality, and provide examples
of this situation.  Both parametricity and naturality are key
components in giving denotational semantics to Algol-like languages.
The known models for these languages do not have strong enough
parametricity properties to subsume naturality.  We give new models
where such subsumption takes place.  The parametricity properties of
the new models automatically incorporate solutions for some of the
thorny issues in semantics such as passivity and irreversible state
change. 
[<a href="papers/parametricity.pdf">pdf file</a>]

<p><em> The results in this unpublished paper were generalized in subsequent
joint work with Brian Dunphy, documented in his PhD thesis.  The categorical
ideas of the work were published in "Parametric Limits," LICS 2004.  The ideas
regarding the semantics of Algol-like languages are in the Chapter 6 of
Dunphy's thesis.</em>


<h3> When parametricity implies naturality
(Notes, July 97)</h3>

The issue of whether parametricity and naturality should be assumed
separately or whether parametricity automatically implies naturality
crops up in the parametricity semantics for
Algol (O'Hearn and Tennent, 1995; O'Hearn and Reynolds, 1997).
Intuitively, parametricity and naturality are trying to capture the
same idea of ``uniformity.''  So, it is not immediately clear why one
needs two theories of uniformity or whether one should find some
other theory that subsumes both parametricity and naturality.
The results here are meant to shed some light on the issue.  We
use the framework of reflexive graphs from
(O'Hearn and Tennent, 1995) and add suitable conditions which
entail that parametricity implies naturality.  Further, we show that
the semantics of Algol can be given in such a framework.
[<a href="papers/naturality.dvi">dvi file</a> |
 <a href="papers/naturality.pdf">pdf file</a>]


<hr>
 
<A name = "Summary">
<H2>Summary of Research</H2></A>


<ul>
<li> <b>Concurrent Separation Logic</b>:
A challenging exercise in proving the correctness of a concurrent program,
"On-the-fly garbage collector" of Dijkstra et al., is in
[<a href="#KLR11">KLR11</a>].  A clean formulation of Concurrent Separation Logic
bringing structure to its traditional variable conditions is found in this
[<a href="#RR12">RR12</a>].
<p>
<li> <b>Relational Parametricity</b>:
John Reynolds proposed relational parametricity as a uniformity condition
implicit in polymorphic functions.  A categorical axiomatization of this
notion is in [<a href="#DR04">DR04</a>] and
[<a href="papers/Brian-thesis.ps">Dunphy's PhD thesis</a>].  The
application of these ideas to the semantics of polymorphic Algol-like
languages is in a [<a href="papers/polymorphism.pdf">manuscript</a>].
<p>
<li> <b>Semantics</b>:
The language <em>Idealized Algol+</em> is proposed as a foundation for
Algol-like object-oriented languages[<a href="#Red98">Red98</a>].
Objects with state form the foundation for a new semantics for
higher-order imperative programs without a global state
[<a href="#Red96">Red96</a>].
It has been proved fully abstract up to second order
[<a href="#OR95">OR95</a>].  A newer model that combines the traditional
state-based semantics and object-based semantics is in
[<a href="#RD11">RD11</a>]. 
An early semantic model for inheritance
in a global state framework is in [<a href="#KR94">KR94</a>] which
subsumes the conference version [<a href="#Red88">Red88</a>].

<p> <li> <b>Type systems</b>:
A type system allows the integration of functional and imperative
programming features without compromise
[<a href="#SRI91">SRI91</a>].  A revised type system with better
properties appears in [<a href="#SRI97">SRI97</a>]. 
See also
<a
href="papers/swarup.dvi">Vipin
Swarup's thesis</a>. 
Reynolds's Syntactic Control of Interference (SCI) has similar goals
and also aims to control unwanted interference through a type system.
We are
able to do type inference for SCI in
[<a href="#HR96">HR96</a>].  Here is the home page of
<!-- BROKEN LINK -->
<a href="sipl/scill.html">SCI and Linear Logic</a> workshop.

<p> <li> <b>Linear logic</b>:
"Acceptors as values" explores functional programming applications for
Girard's linear logic 
[<a href="#Red91">Red91</a>].
"Linear logic model of state" 
[<a href="#Red93a">Red93a</a>]
is the inspiration behind the new object-based semantics.

<p> <li> <b>Object-oriented programming</b>:
An attempt at a sane definition of core C++ is 
<a href="#C++">here</a>.
<!-- BROKEN LINK -->
<a href="http://www-csag.ucsd.edu/projects/concert/icc-plusplus.html">
Illinois Concert C++</a>
 is a simple and powerful extension of C++ for
high-performance parallel computing
[<a href="#CRPD96">CRPD96</a>].

<p> <li> <b>Logic Programming</b>:
Typed Prolog is an implementation of Hindley-Milner typing for Prolog
[<a href="#LR91">LR91</a>].
An application of linear logic ideas to directional typing of concurrent
logic programs is found here
[<a href="#Red93">Red93</a>].
Directional typing of Prolog programs gives a handle on their
termination issues
[<a href="#BLR92">BLR92</a>]. 
All this and much more in 
<!-- BROKEN LINK -->
<a href="papers/Lakshman-thesis">T.K.Lakshman's thesis</a>.

<p> <li> <b>Program transformation/synthesis</b>:
An overview of the Focus project, an experimental system for the
application of term-rewriting and automated deduction techniques for program
transformation, is in  
[<a href="#Red91a">Red91a</a>].
The theoretical underpinnings of these techniques is found in
[<a href="#DR93">DR93</a>].

<p> <li> <b>Automated Deduction</b>:
"Term-rewriting induction" is an induction method for rewrite systems
which justifies the erstwhile "inductionless" induction 
[<a href="#Red90">Red90</a>].
But, induction on term orderings does better
[<a href="#BRH94">BRH94</a>].
Term rewriting ideas and completion techniques are applied to
resolution theorem proving in
[<a href="#BR92">BR92</a>].
"Proof nets" help clean up the completeness issues
[<a href="#BR96">BR96</a>].
All this and more in 
<!-- BROKEN LINK -->
<a
href="http://hdl.handle.net/2142/21185">
Francois Bronsard's thesis</a>.





</ul>

<HR>

<A name = "Students">
<H2>Ph. D. Students</H2></A>

<ul>

<li> 
<b>Brian Dunphy</b>, 
University of Illinois, 2002. <br>
PhD Thesis: 
<a href="papers/Brian-thesis.ps">
<em>Parametricity as a notion of uniformity in reflexive graphs</em></a>.


<p><li> 
<a href="http://www.cs.ox.ac.uk/people/hongseok.yang/Public/Home.html">
<b>Hongseok Yang</b></a>, 
University of Illinois, 2001.<br>
PhD Thesis: 
<!-- BROKEN LINK -->
<a href="http://ncstrl.cs.uiuc.edu/Dienst/UI/2.0/Describe/ncstrl.uiuc_cs/UIUCDCS-R-2001-2227?abstract=yang">
<em>Local reasoning for stateful programs</em></a>, Tech Report
UIUCDCS-R-2001-2227. 

<p><li> 
<a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lakshman:T=_K=.html">
<b>T. K. Lakshman</b></a>, 
University of Illinois, 1996.

<p><li> 
<a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bronsard:Fran=ccedil=ois.html">
<b>Francois Bronsard</b></a>, 
University of Illinois, 1995.<br>
PhD Thesis: 
<!-- BROKEN LINK -->
<a
href="http://hdl.handle.net/2142/21185">
<em>Using term ordering to control clausal deduction</em></a>, Tech
Report UIUCDCS-R-95-1910.

<p><li> 
<a href="http://www.uwplatt.edu/~hasker/">
<b>Robert W. Hasker</b></a>, 
University of Illinois, 1994.<br>
PhD Thesis: 
<!-- BROKEN LINK -->
<a
href="http://hdl.handle.net/2142/21206">
<em>Replay of Program Derivations</em></a>, Tech Report
UIUCDCS-R-94-1890.

<p><li>
<a
href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Swarup:Vipin.html">
<b>Vipin Swarup</b></a>,
University of Illinois, 1992.<br>
PhD Thesis: 
<!-- BROKEN LINK -->
<a
href="http://ncstrl.cs.uiuc.edu/Dienst/UI/2.0/Describe/ncstrl.uiuc_cs/UIUCDCS-R-92-1777?abstract=swarup">
<em>Type Theoretic Properties of Assignments</em></a>, Tech Report UIUCDCS-R-92-1777.

<p><li>
<a
href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pyo:Changwoo.html">
<b>Changwoo Pyo</b></a>,
University of Illinois, 1990.<br>
PhD Thesis: <em>Type inference for Logic Programs</em>.

</ul>


<HR>
<A name = "Bibliography">
<H2>Bibliography</H2></A>


<DL>

<DT> <a name="BOR14">[BOR14]</a>
<dd> <a href="papers/EssenceOfReynolds.pdf">
     The Essence of Reynolds</a>,
     <a href="http://www.cs.cmu.edu/~brookes/">S. Brookes</a>, 
     <a href="http://www0.cs.ucl.ac.uk/staff/P.OHearn/">P.W. O'Hearn</a> and
     U.S. Reddy, 
    <a href="http://popl.mpi-sws.org/2014/">ACM Symp. on Principles of
    Programming Languages 2014</a>.

<DT> <a name="HRR14">[HRR14]</a>
<dd> <a href="papers/logical-relations-and-parametricity.pdf">
     Logical relations and parametricity: A Reynolds programme for category
     theory and programming languages</a>,
     C. Hermida, U.S. Reddy and E.P. Robinson,
  <a href="https://wiki.bath.ac.uk/display/wessex/20th+Wessex+Theory+Seminar%3A+Workshop+on+Algebra,+Coalgebra+and+Topology">Workshop
  on Algebra, Coalgebra and Topology 2013</a>, ENTCS, to appear, 2014.

<DT> <a name="R13">[R13]</a>
<dd> <a href="papers/passivity.pdf">
     Automata-theoretic semantics of Idealized Algol with Passive
     Expressions</a>,
     U.S. Reddy,
    <a href="http://www.sciencedirect.com/science/journal/15710661/298/supp/C">Proc. 
      Twenty-Ninth Conf. on Math. Foundations of Prog. Semantics, MFPS
      XXIX</a>, ENTCS Vol. 298, pp. 325-348, 2013. 

<DT> <a name="RR12">[RR12]</a>
<dd> <a href="papers/sci-reddy-reynolds.pdf">
     Syntactic Control of Interference for Separation Logic</a>, 
     U. S. Reddy and J. C. Reynolds,
     <a href="http://www.cse.psu.edu/popl/12/"><em>ACM Symp. on Principles
	 of Programming Languages</em></a>, 2012. 
<!--      <a href="http://dx.doi.org/10.1007/s10992-011-9195-1>DOI: -->
<!--      10.1007/s10992-011-9195-1"></a>.  -->

<DT> <a name="RD11">[RD11]</a>
<dd> <a href="http://www.disi.unige.it/person/ZuccaE/FOOL2011/paper6.pdf">
    <!-- <a href="papers/automata.pdf"> -->
     An Automata-Theoretic Model of Objects</a>, 
     U. S. Reddy and B. P. Dunphy,
     <a href="http://www.disi.unige.it/person/ZuccaE/FOOL2011">
     <em>Foundations of Object-Oriented Languages</em></a>, October, 2011.

<DT> <a name="KLR11">[KLR11]</a>
<dd> <a href="papers/fine-grained.pdf">
     Fine-grained Concurrency with Separation Logic</a>, 
     K. Kapoor, K. Lodaya and U. S. Reddy,
     <a href="http://www.springer.com/philosophy/logic+and+philosophy+of+language/journal/10992"><em>Journal
     of Philosophical Logic</em></a>,  40(5)583-632, 2011.
     <a href="http://dx.doi.org/10.1007/s10992-011-9195-1>DOI:
     10.1007/s10992-011-9195-1"></a>. 

<DT> <a name="DR04">[DR04]</a>
<dd> <a href="papers/parametric.pdf">
     Parametric Limits</a>, 
     B. P. Dunphy and U. S. Reddy,
     <em>IEEE Conf. Logic in Computer Science</em>, 2004.

<DT> <a name="RY04">[RY04]</a>
<dd> <a href="papers/heap-parametricity.ps">
     Correctness of Data Representations involving Heap Data
     Structures</a>, 
     U. S. Reddy and H.Yang,
     <em>Science of Computer Programming</em>, 50(1-3): 2004.
  [<a href="papers/heap-parametricity.ps">PS</a> |
   <a href="papers/heap-parametricity.pdf">PDF</a>]


<DT> <a name="RY03">[RY03]</a>
<dd> <a
href="http://ropas.snu.ac.kr/~hyang/paper/heap-parametricity.ps">
     Correctness of Data Representations involving Heap Data
     Structures</a>, 
     U. S. Reddy and H. Yang,
     in P. Degano (ed) <i>Programming Languages and Systems, 12th
     European Symposium on Programming</i>, 
     Springer LNCS, Vol. 2618, pp 223-237, 2003.

<DT> <a name="BORT02">[BORT02]</a>
<DD> <a href="http://www.dcs.qmw.ac.uk/~ohearn/papers/LinCP.ps">
     Linear Continuation Passing</a>,
     J. Berdine, P. W. O'Hearn, U. S. Reddy, H. Thielecke,
     <i>Higher Order and Symbolic Computation</i>, 15(2/3):181--208,
     September 2002.  


<DT> <a name="Red02">[Red02]</a>
<dd> <a href="papers/objects-and-classes.pdf">
     Objects and classes in Algol-like Languages</a>,
     <i>Information and Computation</i>, 172:63-97, 2002.
<p>
<DT> <a name="RY00">[RY00]</a>
<dd> <a href="papers/refinement.pdf">
     On the Semantics of Refinement Calculi</a>,
     U. S. Reddy and H. Yang,
     Foundations of Software Science and Computer Structures 2000.

<DT> <a name="Red99">[Red99]</a>
<dd> <a href="papers/progtheory.pdf">
     Programming Theory</a>,
     U. S. Reddy,  
     <i>Wiley Encyclopedia of Electrical and Electronics
     Engineering</i>, 
     Vol. 17, John Wiley, 1999, pp. 358-374.

<DT> <a name="Red98">[Red98]</a>
<DD> <a href="papers/classes.pdf">
     Objects and classes in Algol-like languages</a>,
     U.S.Reddy,
     <a href="http://pauillac.inria.fr/~remy/fool/"> FOOL 5</a>,
      San Diego, Jan. 1998.

<p>
<DT> <a name="SRI97">[SRI97]</a>
<DD> Assignments for Applicative Languages,
     V.Swarup, U.S.Reddy, E.Ireland,
     Chapter 9 of 
     <a href="http://www.dcs.qmw.ac.uk/~ohearn/Algol/algol.html">
           Algol-like Languages</a>, Volume 1,
     <a href="http://www.dcs.qmw.ac.uk/~ohearn/">O'Hearn, P.W.</a> and
     Tennent, R.D. (eds) Birhauser, Boston, 1997.
     
<DT> <a name="Red96a">[Red96a]</a>
<DD> <a href="papers/imperative-functional.pdf">
     Imperative Functional Programming</a>,
     U.S.Reddy,
     <i>Computing Surveys</i>, 28:2(312-314), ACM, June 1996.

<DT> <a name="BR96">[BR96]</a>
<DD> <a href="papers/clausal.ps">
	Clausal completion</a>,
	F.Bronsard and U.S.Reddy,
	Manuscript, Jan. 1996. 
  [<a href="papers/clausal.ps">PS</a> |
   <a href="papers/clausal.pdf">PDF</a>]
<p>

<DT> <a name="CRPD96">[CRPD96]</a>
<DD> <!-- BROKEN LINK -->
<A
href="http://www-csag.ucsd.edu/projects/concert/icc/icc-paper.ps">
	ICC++: A C++ dialect for high performance parallel computing</a>,
	in <a href="http://www.jaist.ac.jp/misc/meetings/ISOTAS96/">
	ISOTAS 96</a>.
<p>


<DT> <a name="Red96">[Red96]</a>
<DD> <a href="papers/global.object.ps">
	Global state considered unnecessary: An introduction to
	object-based semantics</a>,
	J. Lisp and Symbolic Computation, 9(1996):7-76.
  [<a href="papers/global.object.ps">PS</a> |
   <a href="papers/global.object.pdf">PDF</a>]
<p>

<DT> <a name="HR96">[HR96]</a>
<DD> <a href="papers/sci.inference.pdf">
	Type reconstruction for SCI</a>,
	Glasgow Functional Programming Workshop, 1995.
<p>


<DT> <a name = "OR95">[OR95]</a>
<DD> <!-- BROKEN LINK -->
     <a
	href="http://www.elsevier.nl:80/cas/tree/store/tcs/sub/noncas/pc/volume1/ohearn.ps">
	Objects, interference and the Yoneda embedding</a>,
	(joint with 
	<a href="http://www.dcs.qmw.ac.uk/~ohearn/">Peter
	O'Hearn</a>), 
	<a href="http://www.elsevier.com/gej-ng/31/29/23/show/Products/notes/contents.htt">
	MFPS XI</a>,
	Vol 1. of 
	<a href="http://www.elsevier.nl/locate/entcs">
	ENTCS</a>, 1995.
<p>

<DT> <a name="BRH94">[BRH94]</a>
<DD> <a href="???">
	Induction using term orderings</a>,
	F.Bronsard, U.S.Reddy and R.W.Hasker,
	in A.Bundy (ed), CADE 94, LNAI Vol. 814, Springer-Verlag,
	1994, pp. 102-117.
<p>


<DT> <a name="KR94">[KR94]</a>
<DD> <a href="papers/oosem.pdf">
	Two semantic models of object-oriented languages</a>,
	S.N.Kamin and U.S.Reddy,
	in C.A.Gunter and J.C.Mitchell (eds)
	<em>Theoretical Aspects of Object-Oriented Programming</em>,
	MIT Press, 1994, pp. 463-496.
<p>

<DT> <a name="Red94">[Red94]</a>
<DD> <a href="papers/higher.pdf">
	Higher-order aspects of logic programming</a>,
	in R.Dyckhoff (ed), Extensions of Logic Programming,
	LNAI Vol. 798, Springer-Verlag, 1994.
	(Also) Extended Abstract in P.Van Hentenryck (ed),
	Logic Programming: Eleventh International Conf., MIT Press,
	1994. pp. 402-418.
<p>


<DT> <a name="Red94a">[Red94a]</a>
<DD> <a href="papers/passivity-and-indep.pdf">
	Passivity and Independence</a>,
	LICS 94, pp. 342-352.
<p>

<DT> <a name="C++">[Red94b]</a>
<DD> <!-- BROKEN LINK -->
     <a href="papers/core.pdf">
	The design of core C++</a>,
	Manuscript, May 1994.
<p>
	

<DT> <a name="DR93">[DR93]</a>
<DD> <a href="papers/synthesis.ps">
	Deductive and inductive synthesis of equational programs</a>,
	N.Dershowitz and U.S.Reddy,
	J. Symbolic Computation, 15(1993):467-494.
  [<a href="papers/synthesis.ps">PS</a> |
   <a href="papers/synthesis.pdf">PDF</a>]
<p>


<DT> <a name="Red93">[Red93]</a>
<DD> <a href="papers/directional.pdf">
	A typed foundation for directional logic programming</a>,
	in E.Lamma and P.Mello (eds) Extensions of Logic Programming,
	LNAI Vol. 660, Springer-Verlag, 1993, pp. 282-318.
<p>

<DT> <a name="Red93a">[Red93a]</a>
<DD> <a href="papers/state.full.pdf">
	A linear logic model of state</a>,
	Manuscript, Oct. 1993.
<p>

<DT> <a name="KR93">[KR93]</a>
<DD> <a href="papers/absint.ps">
	On the power of abstract interpretation</a>,
	S.N.Kamin and U.S.Reddy,
	<em>Computer Languages</em>, 19(1993):2:79-89.
  [<a href="papers/absint.ps">PS</a> |
   <a href="papers/absint.pdf">PDF</a>]
<p>

<DT> <a name="BLR92">[BLR92]</a>
<DD> <a href="papers/termination.pdf">
	A framework of directionality for proving terminatin of
	logic programs</a>,
	F.Bronsard, T.K.Lakshman and U.S.Reddy,
	in K.Apt (ed), Logic Programming: 1992 Joint International
	Conference and Symposium, MIT Press, 1992, pp. 321-335.
<p>


<DT> <a name="BR92">[BR92]</a>
<DD> <!-- BROKEN LINK -->
     <a href="papers/reduction.pdf">
	Reduction techniques for first-order reasoning</a>,
	F.Bronsard and U.S.Reddy,
	in M.Rusinowitch and J.L.Remy (eds), Conditional Term
	rewriting systems, LNCS Vol. 656, Springer-Verlag, 1992, pp.
	242-256. 
<p>

<DT> <a name="SR92">[SR92]</a>
<DD> <a href="papers/logical.pdf">
	A logical view of assignments</a>,
	V.Swarup and U.S.Reddy,
	in J.P.Myers and M.J.O'Donnell (eds),
	Constructivity in Computer Science, LNCS Vol. 613,
	Springer-Verlag, 1992.

<DT> <a name="LR91">[LR91]</a>
<DD> <a href="papers/TypedProlog.ps">
	Typed Prolog: A Semantic Reconstruction of the Mycroft-O'Keefe
	Type System</a>,
	T.K.Lakshman and U.S. Reddy,
	in V.Saraswat and K.Ueda (eds) Logic Programming: 1991
	International Symposium, MIT Press, 1991, pp. 202-217.
  [<a href="papers/TypedProlog.ps">PS</a> |
   <a href="papers/TypedProlog.pdf">PDF</a>]
<p>

<DT> <a name="Red91">[Red91]</a>
<DD> <a href="papers/acceptors.pdf">
	Acceptors as values: Functional Programming in classical
	linear logic</a>, 
	Manuscript, Dec. 1991.

<DT> <a name = "Red91a">[Red91a]</a>
<DD> <a href="papers/???">
	Design principles for an interactive program derivation
	system</a>, in M.Lowry and R.D.McCartney (eds), <em>
	Automating Software Design</em>, AAAI Press, 1991, Chapter 18. 
<p>

<DT> <a name="SRI91">[SRI91]</a>
<DD> <a href="papers/assign.pdf">
	Assignments for applicative languages</a>,
	V.Swarup, U.S.Reddy and E.Ireland,
	in R.J.M.Hughes (ed), FPCA 91,
	LNCS Vol. 523, Springer-Verlag, 1991, pp. 192-214.
<p>

<DT> <a name="Red90">[Red90]</a>
<DD> <a href="papers/term.ps">
	Term Rewriting Induction</a>,
	in M.Stickel (ed) CADE 90, LNAI Vol. 449, 1990, pp. 162-177.
  [<a href="papers/term.ps">PS</a> |
   <a href="papers/term.pdf">PDF</a>]
<p>

<DT> <a name="Red88">[Red88]</a>
<DD> Objects as closures: Abstract semantics of object-oriented
	languages,
	U.S.Reddy,
	Lisp & Functional Porg, 1988, pp. 289-297


</DL>


<HR>
<ADDRESS>
<a href = "http://www.cs.bham.ac.uk/~udr/">
Uday S. Reddy </a> / 
<A href = "http://www.cs.bham.ac.uk/">School of Computer Science</A> /
<A href = "http://www.bham.ac.uk/">Univ of Birmingham</A> /
U.S.Reddy AT cs.bham.ac.uk
</ADDRESS>
<HR>

